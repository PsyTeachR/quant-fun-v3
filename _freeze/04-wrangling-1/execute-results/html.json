{
  "hash": "6f72d15ca55375a9c532aa42c2abc99a",
  "result": {
    "markdown": "# Data wrangling 1: Join, select, and mutate {#04-wrangling-1}\n\n\n\n\n\nIn this chapter, we start our exploration of <a href='https://psyteachr.github.io/glossary/d#data-wrangling' target='_blank' class='glossary' title='The process of preparing data for visualisation and statistical analysis.'>data wrangling</a>. Some of you might have experience painstakingly copying and pasting values into new columns or trying to match up values from multiple spreadsheets. As well as taking a long time, there is so much room for error as you might repeat or miss values. \n\nWe have mentioned a few times now the benefits of working with R/RStudio to develop reproducible research practices over the first few chapters. But, if you take nothing else away from these materials, developing your data wrangling skills is one of the primary benefits that will benefit you in many assessments and careers. Researchers actually spend far more of their time cleaning and preparing their data than they spend analysing it. @dasu2003 estimated that up to 80% of time spent on data analysis involves data preparation tasks! Although every data set presents unique challenges, there are some systematic principles that you will constantly use to make your analyses less error-prone and more efficient. Our mantra is: the data changes but the skills stay the same. \n\nOver the next three chapters, we are going to introduce you to a range of functions within the <pkg>tidyverse</pkg> for wrangling data. In this chapter, we will cover joining two data sets by a common identifier, selecting columns to simplify your data, arranging values within a data set, and mutating data to create new variables.   \n\n**Chapter Intended Learning Outcomes (ILOs)**\n\nBy the end of this chapter, you will be able to: \n\n- Join two data sets by matching one or more identifying columns in common. \n\n- Select a range and reorder variables in your data set. \n\n- Arrange values in numerical or alphabetical order. \n\n- Modify or create variables, such as recoding values or creating new groups.\n\n## Chapter preparation\n\n### Introduction to the data set \n\nFor this chapter, we are using open data from @woodworth_data_2018 one more time. In the last two chapters, we asked you to trust us and copy some code until we reached data wrangling, and now is the time to fill in those gaps. If you need a reminder, the abstract of their article is: \n\n> We present two datasets. The first dataset comprises 992 point-in-time records of self-reported happiness and depression in 295 participants, each assigned to one of four intervention groups, in a study of the effect of web-based positive-psychology interventions. Each point-in-time measurement consists of a participant’s responses to the 24 items of the Authentic Happiness Inventory and to the 20 items of the Center for Epidemiological Studies Depression (CES-D) scale. Measurements were sought at the time of each participant’s enrolment in the study and on five subsequent occasions, the last being approximately 189 days after enrolment. The second dataset contains basic demographic information about each participant.\n\nIn summary, we have one data set containing demographic information about participants and a second data set containing measurements of two scales on happiness and depression. \n\n### Organising your files and project for the chapter\n\nBefore we can get started, you need to organise your files and project for the chapter, so your working directory is in order.\n\n1. In your folder for research methods and the book `ResearchMethods1_2/Quant_Fundamentals`, create a new folder called `Chapter_04_06_datawrangling`. As we are spending three chapters on data wrangling, we will work within one folder. Within `Chapter_04_06_datawrangling`, create two new folders called `data` and `figures`.\n\n2. Create an R Project for `Chapter_04_06_datawrangling` as an existing directory for your chapter folder. This should now be your working directory.\n\n3. We will work within one folder, but create a new R Markdown for each chapter. Create a new R Markdown document and give it a sensible title describing the chapter, such as `04 Data Wrangling 1`. Delete everything below line 10 so you have a blank file to work with and save the file in your `Chapter_04_06_datawrangling` folder. \n\n4. If you already have the two files from chapter 3, copy and paste them into the `data/` folder. If you need to download them again, the links are data file one ([ahi-cesd.csv](data/ahi-cesd.csv)) and data file two ([participant-info.csv](data/participant_info.csv)). Right click the links and select \"save link as\", or clicking the links will save the files to your Downloads. Make sure that both files are saved as \".csv\". Save or copy the file to your `data/` folder within `Chapter_04_06_datawrangling`.\n\nYou are now ready to start working on the chapter! \n\n::: {.callout-note collapse=\"true\"}\n#### Reminder of file management if you use the online server\nIf we support you to use the online University of Glasgow R Server, working with files is a little different. If you downloaded R / RStudio to your own computer or you are using one of the library/lab computers, please ignore this section. \n\n1. Log on to the **R server** using the link we provided to you.\n\n2. In the file pane, click `New folder` and create the same structure we demonstrated above.\n\n3. Download these two data files which we used in Chapter 3. Data file one: [ahi-cesd.csv](data/ahi-cesd.csv). Data file two: [participant-info.csv](data/participant_info.csv). Save the two files into the `data` folder you created for chapter 3. To download a file from this book, right click the link and select \"save link as\". Make sure that both files are saved as \".csv\". Do not open them on your machine as often other software like Excel can change setting and ruin the files.\n\n4. Now that the files are stored on your computer, go to RStudio on the server and click `Upload` then `Browse` and choose the folder for the chapter you are working on.\n\n5. Click `Choose file` and go and find the data you want to upload.\n:::\n\n### Activity 1 - Load <pkg>tidyverse</pkg> and read the data files\n\nAs the first activity, try and test yourself by loading <pkg>tidyverse</pkg> and reading the two data files. As a prompt, save the data files to these two object names to be consistent with the activities below, but you can check your answer below if you are stuck. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load the tidyverse package below\n?\n  \n# Load the two data files\n# This should be the ahi-cesd.csv file \ndat <- ?\n\n# This should be the participant-info.csv file\npinfo <- ?\n```\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n#### Show me the solution\nYou should have the following in a code chunk: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load the tidyverse package below\nlibrary(tidyverse)\n\n# Load the two data files\n# This should be the ahi-cesd.csv file \ndat <- read_csv(\"data/ahi-cesd.csv\")\n\n# This should be the participant-info.csv file\npinfo <- read_csv(\"data/participant-info.csv\")\n```\n:::\n\n\n:::\n\n## Tidyverse and the dplyr package\n\nSo far, we have loaded a <a href='https://psyteachr.github.io/glossary/p#package' target='_blank' class='glossary' title='A group of R functions.'>package</a> called <pkg>tidyverse</pkg> in every chapter and it is going to be at the core of all the data skills you develop. The tidyverse ([https://www.tidyverse.org/](https://www.tidyverse.org/){target=\"_blank\"},  @tidyverse is an ecosystem containing six core packages: <pkg>dplyr</pkg>, <pkg>tidyr</pkg>, <pkg>readr</pkg>, <pkg>purrr</pkg>,  <pkg>ggplot2</pkg>, and <pkg>tibble</pkg>. Within these six core packages, you have access to <a href='https://psyteachr.github.io/glossary/f#function' target='_blank' class='glossary' title='A named section of code that can be reused.'>functions</a> that will pretty much cover everything you need to wrangle and visualise your data. \n\nIn chapter 3, we introduced you to the package <pkg>ggplot2</pkg> for data visualisation. In this chapter, we focus on functions from the [<pkg>dplyr</pkg>](https://dplyr.tidyverse.org/){target=\"_blank\"} package, which the authors describe as a grammar of data manipulation (in the wrangling sense, not deviously making up data). \n\nThe <pkg>dplyr</pkg> package contains several key functions based on common English verbs to help you understand what the code is doing. For an overview, we will introduce you to the following functions:\n\n|Function|Description|\n|:------:|:----------|\n|`*_join()`| Add columns from two data sets by matching observations|\n|`select()`| Include or exclude certain variables (columns)|\n|`mutate()`| Create new variables (columns)|\n|`arrange()`| Change the order of observations (rows)|\n|`filter()`| Include or exclude certain observations (rows)|\n|`group_by()`| Organize the observations (rows) into groups|\n|`summarise()`| Create summary variables for groups of observations|\n\nJust looking at the names gives you some idea of what the functions do. For example, `select()` selects columns and `arrange()` orders observations. You will be surprised by how far you can get with data wrangling using just these functions. There will always be unique problems to solve, but these functions cover the most common that apply to almost every data set. \n\nIn this chapter, we focus on the `*_join()` series of functions, `select()`, `arrange()`, and `mutate()`.\n\n## Joining two data frames with `*_join()` functions {#04-joins}\n\nThe first thing we will do is combine data files. We have two files, `dat` and `pinfo`, but what we really want is a single file that has both the happiness and depression scores and the demographic information about the participants as it makes it easier to work with the combined data. \n\nTo do this, we are going to use the function `inner_join()`. So far, we have described these types of functions as `*_join()`. This is because there are a series of functions that join two data sets in slightly different ways. You do not need to memorise these, but it might be useful to refer back to later. \n\n|Join function|Description|\n|:------:|:----------|\n|`inner_join()`| Keep observations in data set x that has a matching key in data set y |\n|`left_join()`| Keep all observations in data set x |\n|`right_join()`| Keep all observations in data set y |\n|`full_join()`| Keep all observations in both data set x and y |\n\n::: {.callout-important}\nAs these functions join data sets in different ways, they will produce different sample sizes depending on the presence of missing data in one or both data sets. For example, `inner_join()` will be the strictest as you must have matching observations in each data set. On the other hand, `full_join()` will be the least strict, as you retain observations that may not exist in one data set or the other. \n:::\n\n### Activity 2 - Join the files together\n\nWe are going to join `dat` and `pinfo` by common identifiers. When we use `inner_join()`, this means we want to keep all the observations in `dat` that also has a corresponding identifier in `pinfo`. This is known as an **<a href='https://psyteachr.github.io/glossary/i#inner-join' target='_blank' class='glossary' title='A mutating join that returns all the rows that have a match in the other table.'>inner-join</a>**, where you would exclude participants if they did not have a matching observation in one of the data sets.\n\nThe code below will create a new object, called `all_dat`, that combines the data from both `dat` and `pinfo` using the columns `id` and `intervention` to match the participants' data across the two sets of data. `id` is a code or number for each unique participant and will be the most common approach you see for creating an identifier. `intervention` is the group the participant was placed in for the study by @woodworth_data_2018. \n\nType and run the code in a new code chunk to inner join the two sets of data.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nall_dat <- inner_join(x = dat, \n                      y = pinfo, \n                      by = c(\"id\", \"intervention\"))\n```\n:::\n\n\nTo break down what this code is doing: \n\n- `all_dat` is the new object you created with the joined data. \n\n- `x` is the first argument and it should be the first data set / object you want to combine.\n\n- `y` is the second argument and it should be the second data set / object you want to combine.\n\n- `by` is the third argument and it lists the identifier as the name(s) of the column(s) you want to combine the data by in quote marks. In this scenario, there are two identifiers common to each data set. They both contain columns called \"id\" and \"intervention\". We have to wrap them in `c()` to say that there is more than one column to combine by. If there was only one common identifier, you would write `by = \"id\"`. \n\n::: {.callout-important}\n#### Why does my data include .x and .y columns?\n\nIf your data sets have more than one common column, you must enter them all in the `by` argument. This tells R there are matching columns and values across the data sets. If you do not enter all the common columns, then R will add on a .x and .y when it adds them together, to label which come from each data set.\n\nFor example, try and run this code and look at the columns in `all_dat2`. You will see it has an extra column compared to `all_dat` as there is both \"intervention.x\" and \"intervention.y\". \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nall_dat2 <- inner_join(x = dat, \n                      y = pinfo, \n                      by = \"id\")\n```\n:::\n\n:::\n\n### Activity 3 - Explore your data objects\n\nOnce you have run this code, you should now see the new `all_dat` object in the environment pane. Remember to get into the habit of exploring your data and objects as you make changes, to check your wrangling is working as intended. \n\nThere are two main ways you can do this: \n\n1. Click on the data object in the Environment pane. This will open it up as a tab in RStudio, and you will be able to scroll through the rows and columns (@fig-img-preview-alldat). \n\n::: {.callout-important}\n#### Why do I not see all my columns? \n\nOne common source of confusion is not seeing all your columns when you open up a data object as a tab. This is because RStudio shows you a maximum of 50 columns at a time. If you have more than 50 columns, to see more, you must use the arrows at the top of the tab where it says \"Cols:\". For example in `all_dat`, it will say 1-50, if you click the right arrow, it will then say 5-54 so you can see the final 4 columns.\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Exploring a data object in RStudio by opening it as a tab. You can navigate around the columns and rows without opening it up in something like Excel. If there are more than 50 columns, you can click the arrows next to Cols.](images/alldat_previewdata.png){#fig-img-preview-alldat fig-align='center' width=100%}\n:::\n:::\n\n\n2. Use the `glimpse()` function to see an overview of the data objects. \n\nWe explored this in chapter 3, but `glimpse()` tells you how many rows and columns your data have, plus an overview of responses per column. Note: you will see a preview of all 54 columns, but we have shortened the preview to 10 columns to take up less space in the book. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglimpse(all_dat)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 992\nColumns: 10\n$ id           <dbl> 12, 162, 162, 267, 126, 289, 113, 8, 185, 185, 246, 185, …\n$ occasion     <dbl> 5, 2, 3, 0, 5, 0, 2, 2, 2, 4, 4, 0, 4, 0, 1, 4, 0, 5, 4, …\n$ elapsed.days <dbl> 182.025139, 14.191806, 33.033831, 0.000000, 202.096887, 0…\n$ intervention <dbl> 2, 3, 3, 4, 2, 1, 1, 2, 3, 3, 3, 3, 1, 2, 2, 2, 3, 2, 2, …\n$ ahi01        <dbl> 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, …\n$ ahi02        <dbl> 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, …\n$ ahi03        <dbl> 2, 1, 1, 2, 2, 4, 1, 1, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 3, …\n$ ahi04        <dbl> 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, …\n$ ahi05        <dbl> 1, 2, 2, 2, 2, 1, 1, 1, 3, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n$ ahi06        <dbl> 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, …\n```\n:::\n:::\n\n\n::: {.callout-tip}\n#### Try this\n\nNow you have explored `all_dat`, try and use one or both of these methods to explore the original `dat` and `pinfo` objects to see how they changed. Notice how the number of rows/observations and columns change from the original objects to when you join them. \n:::\n\n## Selecting variables of interest with `select()`\n\nData sets often have a lot of variables we do not need and it can be easier to focus on just the columns we do need. In `all_dat`, we have 54 variables which takes ages to scroll through and it can be harder to find what you are looking for. \n\nFor the two scales on happiness and depression, we have all their items, as well as their total scores. We can create a data set that only includes the key variables and ignores all the individual items using the <a class='glossary' title='Select, reorder, or rename variables in your data set.'>select()</a> function. There are two ways you can use select: by selecting the variables you want to include, or by selecting the variables you want to ignore. \n\n### Activity 4 - Selecting variables you want to include\n\nIf there are a smaller number of variables you want to include, then it will be more efficient to specify which variables you want to **include**. Returning to the data wrangling from chapter 3, we can select the columns from `all_dat` that we want to keep. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummarydata <- select(.data = all_dat, # First argument as the data object\n                      id, # Stating variables we want to include\n                      occasion, \n                      elapsed.days,\n                      intervention,\n                      ahiTotal, \n                      cesdTotal, \n                      sex, \n                      age, \n                      educ, \n                      income)\n```\n:::\n\n\nTo break down this code: \n\n- We are creating a new object called `summarydata`. \n\n- From `all_dat`, we are selecting 10 columns we want to keep, which we list one by one. \n\n::: {.callout-note}\nIn this example, the variables are in the same order as they were `all_dat`, but they do not need to be. You can use `select()` to create a new variable order if that helps you see all the important variables first. You can also rename variables as you select or reorder them, using the form `new_name = old_name`. \n:::\n\nKeep in mind it is important you select variables and assign them to a new object, or overwrite the old object. Both work, but think about if you need the original object later in your analysis and you do not want to go back and rerun code to recreate it. If you just use the select function on it's own, it does not do anything to the object, R just shows you the variables you selected: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselect(.data = all_dat, # First argument as the data object\n       id, # Stating variables we want to include\n       occasion, \n       elapsed.days,\n       intervention,\n       ahiTotal, \n       cesdTotal, \n       sex, \n       age, \n       educ, \n       income)\n```\n:::\n\n\nIf you have several variables in order that you want to select, you can use a shortcut to avoid typing out every single name. When you select variables, you can use the format `firstcolumn:lastcolumn` to select all the variables from the first column you specify until the last column. \n\nFor example, if we wanted to isolate the individual items, we could use the following code: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nscaleitems <- select(all_dat, # First argument as the data object\n                     ahi01:cesd20) # Range of variables to select\n```\n:::\n\n\nYou can also pair this with individual variable selection: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nscaleitems <- select(all_dat, # First argument as the data object\n                     id, # Individual variable to include\n                     ahi01:cesd20) # Range of variables to select\n```\n:::\n\n\n::: {.callout-tip}\n#### Try this\n\nIf you wanted to select all the variables from `id` to `intervention`, plus all the variables from `ahiTotal` to `income`, how could you use this shortcut format? Try and complete the following code to recreate `summarydata`. Check your answer below when you have tried on your own. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummarydata2 <- ?\n```\n:::\n\n\n:::\n\n::: {.callout-caution collapse=\"true\"} \n#### Solution\n\nInstead of typing all 10 variables, you can select them using two ranges to ignore the scale items in the middle: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummarydata2 <- select(all_dat, # First argument as the data object\n                      id:intervention, # variable range 1\n                      ahiTotal:income) # variable range 2\n```\n:::\n\n\n:::\n\n### Activity 5 - Selecting variables you want to ignore\n\nAlternatively, you can also state which variables you do not want to keep. This is really handy if you want to keep many columns and only remove one or two. \n\nFor example, if we wanted to remove two variables, you add a dash (-) before the variable name:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nall_dat_reduced2 <- select(all_dat, \n                           -occasion, # Remove occasion\n                           -elapsed.days) # Remove elapsed.days\n```\n:::\n\n\nThis also works using the range method, but you must add the dash before the first and last column in the range you want to remove. For example, we can recreate `summarydata` one more time by removing the scale items in the middle:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummarydata3 <- select(all_dat, # \n                       -ahi01:-cesd20) # Remove range of variables\n```\n:::\n\n\n::: {.callout-tip}\nYou can see there were at least three different ways of creating `summarydata` to keep the 10 variables we want to focus on. This is an important lesson as there is often not just one unique way of completing a task in R. \n\nWhen you first start coding, you might begin with the long way that makes sense to you. As you practice more, you recognise ways to simplify your code. \n:::\n\n## Arranging variables of interest with `arrange()`\n\nAnother handy skill is being able to change the order of observations within columns in your data set. The function <a class='glossary' title='Order the rows of a data set by the values of one or more columns.'>arrange()</a> will sort the rows/observations by one or more columns. This can be useful for exploring your data set and answering basic questions, such as: who was the youngest or oldest participant? \n\n### Activity 6 - Arranging in ascending order\n\nUsing `summarydata`, we can order the participants' ages in ascending order: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nage_ascend <- arrange(summarydata,\n                    age)\n```\n:::\n\n\nTo break down the code, \n\n- We create a new object called `age_ascend`. \n\n- We apply the function `arrange()` to the `summarydata` object.\n\n- We order the observations by `age`, which is by default in ascending order from smallest to largest. \n\nIf you look in `age_ascend`, we organised the data in ascending order based on age and can see the youngest participant was 18 years old. \n\n### Activity 7 - Arranging in descending order\n\nBy default, `arrange()` sorts observations in ascending order from the smallest to largest value, or alphabetical order from A to Z. If you want to arrange observations in descending order, you can wrap the name of the variable in the `desc()` function. \n\nFor example, we can order participants from oldest to youngest: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nage_descend <- arrange(summarydata, \n                     desc(age)) # descending order of age\n```\n:::\n\n\nThis time, we can see the oldest participant was 83 years old. \n\n### Activity 8 - Sorting by multiple columns\n\nFinally, you can also sort by more than one column and a combination of ascending and descending columns. Unlike `select()`, you might not need to save your sorted observations as a new object, you could use `arrange()` more as a tool to explore your data. \n\nFor example, we could look for the oldest female participant. Note: your code will show all 992 observations you could scroll through, but we show the first 10 to save space.  \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\narrange(summarydata, \n        sex, # order by sex first\n        desc(age)) # then descending age\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|  id| occasion| elapsed.days| intervention| ahiTotal| cesdTotal| sex| age| educ| income|\n|---:|--------:|------------:|------------:|--------:|---------:|---:|---:|----:|------:|\n|  51|        4|    94.905451|            2|       86|        15|   1|  83|    2|      2|\n|  51|        3|    32.644595|            2|       87|         7|   1|  83|    2|      2|\n|  51|        0|     0.000000|            2|       90|         5|   1|  83|    2|      2|\n|  51|        2|    15.764178|            2|       90|         4|   1|  83|    2|      2|\n|  51|        5|   185.852778|            2|       91|        10|   1|  83|    2|      2|\n| 244|        0|     0.000000|            2|       64|        33|   1|  77|    3|      2|\n| 244|        1|     7.238877|            2|       70|        37|   1|  77|    3|      2|\n| 244|        2|    16.900289|            2|       71|        16|   1|  77|    3|      2|\n| 244|        3|    31.251377|            2|       75|        22|   1|  77|    3|      2|\n| 215|        0|     0.000000|            4|       76|         1|   1|  75|    3|      2|\n\n</div>\n:::\n:::\n\n\n::: {.callout-tip}\n#### Try this\n\nUsing `summarydata` and `arrange()`, sort the data to answer the following questions: \n\n1. How old is the participant with the highest total happiness score (`ahiTotal`)? <input class='webex-solveme nospaces' size='2' data-answer='[\"25\"]'/>\n\n2. What is the highest total depression score (`cesdTotal`) in a female participant (remember 1 = female, 2 = male)? <input class='webex-solveme nospaces' size='2' data-answer='[\"55\"]'/>\n\n:::\n\n::: {.callout-caution collapse=\"true\"} \n#### Solution\n\n1. We only need to arrange by `ahiTotal` in descending order to find the highest value, then look at the age column. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\narrange(summarydata, \n        desc(ahiTotal)) # descending ahiTotal\n```\n:::\n\n\n2. We first order by `sex` in ascending order so 1s are first, then descending order of `cesdTotal` for the highest value. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\narrange(summarydata, \n        sex, # order by sex first\n        desc(cesdTotal)) # Descending depression total\n```\n:::\n\n\n:::\n\n## Modifying or creating variables with `mutate()`\n\nIn the final data wrangling function for this chapter, we can use the function <a class='glossary' title='You can create new columns that are functions of existing variables. You can also modify variables if the name is the same as an existing column.'>mutate()</a> to modify existing variables or create new variables. This is an extremely powerful and flexible function. We will not be able to cover everything you can do with it in this chapter but we will introduce you to some common tasks you might want to apply.  \n\n### Activity 9 - Modifying existing variables \n\nIf you remember back to chapter 3, we had a problem where R interpreted variables like `sex`, `educ`, and `income` as numeric, but ideally we wanted to treat them as distinct categories or factors. We used `mutate()` to convert the three columns to factors:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Overwrite summary data \nsummarydata <- mutate(summarydata, # mutate to change columns \n         sex = as.factor(sex), # save sex as a factor\n         educ = as.factor(educ),\n         income = as.factor(income))\n```\n:::\n\n\nTo break down the code: \n\n- We overwrite `summarydata` by assigning the function to an existing object name. \n\n- We use the `mutate()` function on the old `summarydata` data by using it as the first argument. \n\n- We can add one or more arguments to modify or create variables. Here, we modify an existing variable `sex`, use an equals sign (=), then how we want to modify the variable. In this example, we convert sex to a factor by using the function `as.factor(sex)`. \n\nYou might not just want to turn a variable into a factor, you might want to completely recode what it's values represent. For this, there is a function called <a class='glossary' title='You can switch values from old to new. Statements are evaluated sequentially, meaning the old value is replaced with the first new value it matches.'>case_match()</a> which you can use within `mutate()`. For example, if we wanted to make `sex` easier to interpret, we could overwrite it's values from 1 and 2: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsex_recode <- mutate(summarydata,\n                     sex = case_match(sex, # overwrite existing\n                                      \"1\" ~ \"Female\", # old to new\n                                      \"2\" ~ \"Male\")) # old to new\n```\n:::\n\n\nTo break down this code, \n\n- We create a new object `sex_recode` by mutating the `summarydata` object. \n\n- We modify an existing variable `sex` by applying `case_match()` to `sex`. \n\n- Within `case_match()`, the value on the left is the existing value in the data you want to recode. The value on the right is the new value you want to overwrite it to. So, we want to change all the 1s in the data to Female. We then add a new line for every old value we want to change. \n\n::: {.callout-important}\n#### Error mode\n\nIn the previous exercise, we already converted sex to a factor. So, we had to add quote marks around the old values (`\"1\"`) as they are no longer considered numeric. If you do not add the quote marks, you will get an error like `Can't convert \"..1 (left)\" <double> to <factor>`. \n\nIf you applied this step *before* converting `sex` to a factor, then `1 ~ \"Female\"` would work. This shows why it is important to keep data types in mind as R might not know what you mean if you state one data type when it is expecting another. \n:::\n\n::: {.callout-tip}\n#### Try this\n\nUsing what you just learnt about using `mutate` and `case_match()`, recode the variable `income` and complete the code below. These are what the numeric values mean as labels: \n\n1 = Below average\n\n2 = Average\n\n3 = Above average\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nincome_recode <- mutate(summarydata,\n                     income = ?\n                       )\n```\n:::\n\n\nCheck your code against the solution when you have attempted yourself first. \n:::\n\n::: {.callout-caution collapse=\"true\"} \n#### Solution\n\nFollowing the same format as `sex`, we add a new label for each of the three levels of income. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nincome_recode <- mutate(summarydata,\n                     income = case_match(income, # overwrite existing\n                                      \"1\" ~ \"Below average\", # old to new\n                                      \"2\" ~ \"Average\", # old to new\n                                      \"3\" ~ \"Above average\")) # old to new\n```\n:::\n\n\n:::\n\n### Activity 10 - Creating new variables \n\nYou can also create new variables using `mutate()`. There are many possibilities here, so we will demonstrate a few key principles for inspiration and you will learn how to tackle unique problems as you come to them. \n\nIn it's simplest application, you can use `mutate()` to add a single value to all rows. For example, you might want to label a data set before joining with another data set so you can identify their origin. Instead of overwriting an existing variable, we specify a new variable name and the value we want to assign: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummarydata <- mutate(summarydata,\n                      study = \"Woodworth et al. (2018)\")\n```\n:::\n\n\nUsing a similar kind of logic to `case_match()` we introduced you to earlier, there is an extremely flexible function called <a class='glossary' title='An if else statement to check old values against a set of criteria. Statements are evaluated sequentially, meaning each observation is checked against the criteria, and it receives the first match it passes.'>case_when()</a> to help create new variables. Before we explain how it works, we will jump straight into an example to give you something concrete to work with. \n\n@woodworth_data_2018 includes scores from the Center for Epidemiological Studies Depression (CES-D) scale. Scores range from 0 to 60, with scores of 16 or more considered a cut-off for being at risk of clinical depression. We have the scores, so we can use `case_when()` to label whether participants are at risk or not.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummarydata <- mutate(summarydata,\n                      depression_risk = case_when(\n                        cesdTotal < 16 ~ \"Not at risk\",\n                        cesdTotal > 15 ~ \"At risk\"))\n```\n:::\n\n\nTo break down the code: \n\n- We overwrite `summarydata` by mutating the existing `summarydata` object. \n\n- We create a new variable called `depression_risk` by applying the `case_when()` function to the variable `cesdTotal`. \n\n- We apply two comparisons to label responses as either \"Not at risk\" or \"At risk\". If `cesdTotal` is less than 16 (i.e., 15 or smaller), then it receives the value \"Not at risk\". If `cesdTotal` is more than 15 (i.e., 16 or higher), then it receives the value \"At risk\". \n\nThe function `case_when()` applies these criteria **line by line** as it works through your rows. Depending on which criteria your observation meet, it receives the label \"Not at risk\" or \"At risk\". You can also set the argument `.default` to assign one value for anything that does not pass any criteria you give it. \n\nThe comparisons use something called a <a class='glossary' title='A logical statement in programming to evaluate a condition and return a Boolean value, which can be TRUE or FALSE.'>Boolean expression</a>. These are logical expressions which can return the values of TRUE or FALSE. To demonstrate the idea, imagine we were applying the logic manually to scores in the data. The first value is 50, so we could apply our criteria to see which one it meets:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n50 < 16\n50 > 15\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n[1] TRUE\n```\n:::\n:::\n\n\nR evaluates the first comparison as FALSE as 50 is not smaller than 16, but it evaluates the second comparison as TRUE as 50 is larger than 15. So, `case_when()` would apply the label \"At risk\" as the second statement evaluates to TRUE. \n\n::: {.callout-tip}\n#### Try this\nTry and pick a few more `cesdTotal` scores from the data and apply the criteria to see if they are evaluated as TRUE OR FALSE. It can be tricky moving from imagining what you want to do to being able to express it in code, so the more practice the better. \n:::\n\nWe have only used less than or greater than, but there are several options for expressing Boolean logic, the most common of which are:\n\nOperator\t|Name\t                 |is TRUE if and only if\n----------|----------------------|---------------------------------\nA < B \t  |less than \t           |A is less than B\nA <= B \t  |less than or equal    |A is less than or equal to B\nA > B \t  |greater than \t       |A is greater than B\nA >= B \t  |greater than or equal |A is greater than or equal to B\nA == B \t  |equivalence \t         |A exactly equals B\nA != B \t  |not equal \t           |A does not exactly equal B\nA %in% B \t|in \t                 |A is an element of vector B\n\nBoolean expressions will come up again in chapter 5 when it comes to `filter()`, so there will be plenty more practice as you apply your understanding to different data sets and use cases. \n\n::: {.callout-tip}\n#### Try this\n\nUsing what you just learnt about using `mutate` and `case_when()`, create a new variable called `happy` using the `ahiTotal` variable and complete the code below.\n\nThe Authentic Happiness Inventory (AHI) does not have official cutoffs, but let us pretend scores of **65 or more** are \"happy\" and scores of **less than 65** are \"unhappy\". \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummarydata <- mutate(summarydata,\n                     happy = ?\n                       )\n```\n:::\n\n\nCheck your code against the solution when you have attempted it yourself first. \n:::\n\n::: {.callout-caution collapse=\"true\"} \n#### Solution\n\nFollowing the same format as `depression_risk` and `cesdTotal`, we add a new comparison for each criterion we want to use as a Boolean expression:  \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummarydata <- mutate(summarydata,\n                      happy = case_when(\n                        ahiTotal < 65 ~ \"Unhappy\",\n                        ahiTotal > 64 ~ \"Happy\"))\n```\n:::\n\n\nIf you looked at the table of Boolean operators, you could also express 65 or more as: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummarydata <- mutate(summarydata,\n                      happy = case_when(\n                        ahiTotal < 65 ~ \"Unhappy\",\n                        ahiTotal >= 65 ~ \"Happy\"))\n```\n:::\n\n\n:::\n\n## Test yourself {#ld-test}\n\nTo end the chapter, we have some knowledge check questions to test your understanding of the concepts we covered in the chapter. We then have some error mode tasks to see if you can find the solution to some common errors in the concepts we covered in this chapter. \n\n### Knowledge check\n\n**Question 1**. Which of the following functions would you use if you wanted to keep only certain columns? <div class='webex-radiogroup' id='radio_NZTPWILRBJ'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_NZTPWILRBJ\" value=\"answer\"></input> <span>select()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_NZTPWILRBJ\" value=\"\"></input> <span>arrange()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_NZTPWILRBJ\" value=\"\"></input> <span>mutate()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_NZTPWILRBJ\" value=\"\"></input> <span>inner_join()</span></label></div>\n\n\n**Question 2**. Which of the following functions would you use if you wanted to join two data sets by their shared identifier? <div class='webex-radiogroup' id='radio_WCBNBZMWYC'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_WCBNBZMWYC\" value=\"\"></input> <span>select()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_WCBNBZMWYC\" value=\"\"></input> <span>arrange()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_WCBNBZMWYC\" value=\"\"></input> <span>mutate()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_WCBNBZMWYC\" value=\"answer\"></input> <span>inner_join()</span></label></div>\n\n\n**Question 3**. Which of the following functions would you use if you wanted to add or modify a column? <div class='webex-radiogroup' id='radio_VHWKFRPMTQ'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_VHWKFRPMTQ\" value=\"\"></input> <span>select()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_VHWKFRPMTQ\" value=\"\"></input> <span>arrange()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_VHWKFRPMTQ\" value=\"answer\"></input> <span>mutate()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_VHWKFRPMTQ\" value=\"\"></input> <span>inner_join()</span></label></div>\n\n\n**Question 4**. When you use mutate(), which additional function could you use to recode an existing variable? <div class='webex-radiogroup' id='radio_DCZMXMXOMO'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_DCZMXMXOMO\" value=\"\"></input> <span>arrange()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_DCZMXMXOMO\" value=\"\"></input> <span>case_when()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_DCZMXMXOMO\" value=\"answer\"></input> <span>case_match()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_DCZMXMXOMO\" value=\"\"></input> <span>filter()</span></label></div>\n\n\n**Question 5**. When you use mutate(), which additional function could you use to create a new variable depending on specific criteria you set? <div class='webex-radiogroup' id='radio_HURAMNSJSA'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_HURAMNSJSA\" value=\"\"></input> <span>arrange()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_HURAMNSJSA\" value=\"answer\"></input> <span>case_when()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_HURAMNSJSA\" value=\"\"></input> <span>case_match()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_HURAMNSJSA\" value=\"\"></input> <span>filter()</span></label></div>\n\n\n### Error mode\n\nThe following questions are designed to introduce you to making and fixing errors. For this topic, we focus on data wrangling using the functions `inner_join()`, `select()`, and `mutate()`. Remember to keep a note of what kind of error messages you receive and how you fixed them, so you have a bank of solutions when you tackle errors independently. \n\nCreate and save a new R Markdown file for these activities. Delete the example code, so your file is blank from line 10. Create a new code chunk to load `tidyverse` and the two data files: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load the tidyverse package\nlibrary(tidyverse)\n\n# Load the two data files\ndat <- read_csv(\"data/ahi-cesd.csv\")\npinfo <- read_csv(\"data/participant-info.csv\")\n```\n:::\n\n\nBelow, we have several variations of a code chunk error or misspecification. Copy and paste them into your R Markdown file below the code chunk to load `tidyverse` and the data. Once you have copied the activities, click knit and look at the error message you receive. See if you can fix the error and get it working before checking the answer.\n\n**Question 6**. Copy the following code chunk into your R Markdown file and press knit. This...works, but we want 54 columns rather than 55 columns. Some of the columns do not look quite right?  \n\n\n\n````markdown\n```{r}\nall_dat <- inner_join(x = dat, \n                      y = pinfo, \n                      by = c(\"id\"))\n```\n\n````\n\n::: {.callout-caution collapse=\"true\"} \n#### Explain the solution\n\nThis was a prompt to look out for duplicate columns when we do not specify all the common columns between the data sets you want to join. You join by \"id\" which works, but because you did not also add \"intervention\", you get .x and .y appended to two \"intervention\" columns. \n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nall_dat <- inner_join(x = dat, \n                      y = pinfo, \n                      by = c(\"id\", \"intervention\"))\n```\n:::\n:::\n\n**Question 7**. Copy the following code chunk into your R Markdown file and press knit. You should receive an error like `! Can't subset columns that don't exist. x Column \"interventnion\" doesnt exist.` \n\n\n````markdown\n```{r}\nselect_data <- select(.data = pinfo,\n                      id,\n                      intervetnion,\n                      sex, \n                      age, \n                      educ, \n                      income)\n```\n````\n\n::: {.callout-caution collapse=\"true\"} \n#### Explain the solution\n\nThis is an example of a sneaky typo causing an error. R is case and spelling sensitive, so it does not know what you mean when you asked it to select the column \"intervetnion\" rather than \"intervention\". To fix the error, you just need to fix the typo: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselect_data <- select(.data = pinfo,\n                      id,\n                      intervention,\n                      sex, \n                      age, \n                      educ, \n                      income)\n```\n:::\n\n:::\n\n**Question 8**. Copy the following code chunk into your R Markdown file and press knit. You should receive an error like `! Cant convert \"..1 (left)\" <character> to <double>.` \n\n\n\n````markdown\n```{r}\nrecode_variable <- mutate(pinfo,\n                          sex = case_match(sex,\n                                           \"1\" ~ \"Female\",\n                                           \"2\" ~ \"Male\"))\n```\n\n````\n\n::: {.callout-caution collapse=\"true\"} \n#### Explain the solution\n\nThis is the opposite problem to what we warned about in the `case_match` section. You need to honour data types and we have not converted sex to a factor or character in this example. So, R does not know how to match the character \"1\" against the number/double 1 in the data. To fix the error, you need to remove the double quotes to give R a number/double like it can see in the data: \n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrecode_variable <- mutate(pinfo,\n                          sex = case_match(sex,\n                                           1 ~ \"Female\",\n                                           2 ~ \"Male\"))\n```\n:::\n:::\n\n**Question 9**. Copy the following code chunk into your R Markdown file and press knit. We want to create two groups depending on if we consider a participant a teenager if they are younger than 20, or not a teenger if they are 20 years or older. The code below...works? This is a sneaky one, so think about the criteria we want vs the criteria we set. \n\n\n````markdown\n```{r}\nage_groups <- mutate(pinfo,\n                      age_groups = case_when(\n                        age < 20 ~ \"Teenager\",\n                        age > 20 ~ \"Not a teenager\"))\n```\n````\n\n::: {.callout-caution collapse=\"true\"} \n#### Explain the solution\n\nThis is a really sneaky one as it does not actually affect a participant in the data, but there is a small mismatch between the criteria we want and the criteria we set. \n\nIn our \"teenager\" group, this is accurate as we want to classify them if they are younger than 20. However, in the \"not a teenager\" group we currently set the criterion if they are older than 20, i.e., 21 or older. This would mean 20 year old participants are stuck in the middle with no group. \n\nWe see this kind of mistake a lot, so think carefully about your Boolean expression and check examples in the console if you are unsure. To fix, you could use: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nage_groups <- mutate(pinfo,\n                      age_groups = case_when(\n                        age < 20 ~ \"Teenager\",\n                        age > 19 ~ \"Not a teenager\"))\n```\n:::\n\n\nor\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nage_groups <- mutate(pinfo,\n                      age_groups = case_when(\n                        age < 20 ~ \"Teenager\",\n                        age >= 20 ~ \"Not a teenager\"))\n```\n:::\n\n:::\n\n## Words from this Chapter\n\nBelow you will find a list of words that were used in this chapter that might be new to you in case it helps to have somewhere to refer back to what they mean. The links in this table take you to the entry for the words in the [PsyTeachR Glossary](https://psyteachr.github.io/glossary/){target=\"_blank\"}. Note that the Glossary is written by numerous members of the team and as such may use slightly different terminology from that shown in the chapter.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n|term                                                 |definition                                                                                                                                                                                                      |\n|:----------------------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|[arrange()](https://psyteachr.github.io/glossary/a#arrange()){target='_blank' class='glossary'}|Order the rows of a data set by the values of one or more columns.                                                                                                                                              |\n|[boolean-expression](https://psyteachr.github.io/glossary/b#boolean-expression){target='_blank' class='glossary'}|A logical statement in programming to evaluate a condition and return a Boolean value, which can be TRUE or FALSE.                                                                                              |\n|[case_match()](https://psyteachr.github.io/glossary/c#case_match()){target='_blank' class='glossary'}|You can switch values from old to new. Statements are evaluated sequentially, meaning the old value is replaced with the first new value it matches.                                                            |\n|[case_when()](https://psyteachr.github.io/glossary/c#case_when()){target='_blank' class='glossary'}|An if else statement to check old values against a set of criteria. Statements are evaluated sequentially, meaning each observation is checked against the criteria, and it receives the first match it passes. |\n|[data-wrangling](https://psyteachr.github.io/glossary/d#data-wrangling){target='_blank' class='glossary'}|The process of preparing data for visualisation and statistical analysis.                                                                                                                                       |\n|[function](https://psyteachr.github.io/glossary/f#function){target='_blank' class='glossary'}|A named section of code that can be reused.                                                                                                                                                                     |\n|[inner-join](https://psyteachr.github.io/glossary/i#inner-join){target='_blank' class='glossary'}|A mutating join that returns all the rows that have a match in the other table.                                                                                                                                 |\n|[mutate()](https://psyteachr.github.io/glossary/m#mutate()){target='_blank' class='glossary'}|You can create new columns that are functions of existing variables. You can also modify variables if the name is the same as an existing column.                                                               |\n|[package](https://psyteachr.github.io/glossary/p#package){target='_blank' class='glossary'}|A group of R functions.                                                                                                                                                                                         |\n|[select()](https://psyteachr.github.io/glossary/s#select()){target='_blank' class='glossary'}|Select, reorder, or rename variables in your data set.                                                                                                                                                          |\n:::\n:::\n\n\n## End of Chapter\n\nExcellent work so far! Data wrangling is a critical skill and being able to clean and prepare your data using code will save you time in the long run. Manually tidying data might seem quicker now when you are unfamilar with these functions, but it is open to errors which may not have a paper trail as you edit files. By reproducibly wrangling your data, you can still make mistakes, but they are reproducible mistakes you can fix. \n\nIn the next chapter, we start by recapping the key functions from this chapter on a new data set, then introduce you to more data wrangling functions from <pkg>dplyr</pkg> to expand your toolkit. \n",
    "supporting": [
      "04-wrangling-1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}